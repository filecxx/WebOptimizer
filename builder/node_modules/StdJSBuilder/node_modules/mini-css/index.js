
module.exports = (function() {
    var fs = null,
        hexcolor = /[0-9a-f]/gi;
    
    /**
     * miniCSS(css, file, overwrite);
     * @param css a block of CSS
     * @param file a file path and name
     * @param poverwrite save shrunk file
     */
    return function(css, file, overwrite) {
        if(!css && file) {
            fs = fs || require("fs");
            css = fs.readFileSync(file, { encoding: "utf8" }).toString("utf8");
        }
        if(!css) {
            return null;
        }
        
        // via http://stackoverflow.com/questions/4402220/regex-to-minimize-css
        css = css.replace( /\/\*(?:(?!\*\/)[\s\S])*\*\/|[\r\n\t]+/g, '' );
        css = css.replace( / {2,}/g, ' ' );
        css = css.replace( / ([{:}]) /g, '$1' );
        css = css.replace( /([;,]) /g, '$1' );
        css = css.replace( / !/g, '!' );
        css = css.split(": ").join(":");
        css = css.split(";}").join("}");
        
        // hex color shrinking
        var cssparts = css.split("#");
        for(var i=1, len=cssparts.length; i<len; i++) {
            if(!cssparts[i] || cssparts[i].length < 6) {
                continue;
            }
            var color = cssparts[i].substring(0, 6);
            if(color.match(hexcolor) == null) {
                continue;
            }
            if(color[0] != color[1] || color[2] != color[3] || color[4] != color[5]) {
                continue;
            }
            var shrunk = color[0] + color[2] + color[4];
            cssparts[i] = shrunk + cssparts[i].substring(6); 
        }
        var result = cssparts.join("#");
        if(overwrite) {
            fs.unlinkSync(file);
            fs.writeFileSync(file, result);
        }
        return result;
    }
})();